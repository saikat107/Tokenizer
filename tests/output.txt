<METHOD_START> <"public"> <"GPUImageLaplacianFilter" , void> <"("> <")"> <"{"> <"this("> <"new"> <"float"> <"[]"> <"{"> <"0.5f" , NUMBER> <","> <"1.0f" , NUMBER> <","> <"0.5f" , NUMBER> <","> <"1.0f" , NUMBER> <","> <"-"> <"6.0f" , NUMBER> <","> <"1.0f" , NUMBER> <","> <"0.5f" , NUMBER> <","> <"1.0f" , NUMBER> <","> <"0.5f" , NUMBER> <"}"> <");"> <"String" , java.lang.String> <"test" , java.lang.String> <"="> <"""" , STRING> <"+"> <""precision highp float;\n"" , STRING> <"+"> <""\n"" , STRING> <"+"> <""uniform sampler2D inputImageTexture;\n"" , STRING> <"+"> <""\n"" , STRING> <"+"> <""uniform mediump mat3 convolutionMatrix;\n"" , STRING> <"+"> <""\n"" , STRING> <"+"> <""varying vec2 textureCoordinate;\n"" , STRING> <"+"> <""varying vec2 leftTextureCoordinate;\n"" , STRING> <"+"> <""varying vec2 rightTextureCoordinate;\n"" , STRING> <"+"> <""\n"" , STRING> <"+"> <""varying vec2 topTextureCoordinate;\n"" , STRING> <"+"> <""varying vec2 topLeftTextureCoordinate;\n"" , STRING> <"+"> <""varying vec2 topRightTextureCoordinate;\n"" , STRING> <"+"> <""\n"" , STRING> <"+"> <""varying vec2 bottomTextureCoordinate;\n"" , STRING> <"+"> <""varying vec2 bottomLeftTextureCoordinate;\n"" , STRING> <"+"> <""varying vec2 bottomRightTextureCoordinate;\n"" , STRING> <"+"> <""\n"" , STRING> <"+"> <""void main()\n"" , STRING> <"+"> <""{\n"" , STRING> <"+"> <""mediump vec3 bottomColor = texture2D(inputImageTexture, bottomTextureCoordinate).rgb;\n"" , STRING> <"+"> <""mediump vec3 bottomLeftColor = texture2D(inputImageTexture, bottomLeftTextureCoordinate).rgb;\n"" , STRING> <"+"> <""mediump vec3 bottomRightColor = texture2D(inputImageTexture, bottomRightTextureCoordinate).rgb;\n"" , STRING> <"+"> <""mediump vec4 centerColor = texture2D(inputImageTexture, textureCoordinate);\n"" , STRING> <"+"> <""mediump vec3 leftColor = texture2D(inputImageTexture, leftTextureCoordinate).rgb;\n"" , STRING> <"+"> <""mediump vec3 rightColor = texture2D(inputImageTexture, rightTextureCoordinate).rgb;\n"" , STRING> <"+"> <""mediump vec3 topColor = texture2D(inputImageTexture, topTextureCoordinate).rgb;\n"" , STRING> <"+"> <""mediump vec3 topRightColor = texture2D(inputImageTexture, topRightTextureCoordinate).rgb;\n"" , STRING> <"+"> <""mediump vec3 topLeftColor = texture2D(inputImageTexture, topLeftTextureCoordinate).rgb;\n"" , STRING> <"+"> <""\n"" , STRING> <"+"> <""mediump vec3 resultColor = topLeftColor * convolutionMatrix[0][0] + topColor * convolutionMatrix[0][1] + topRightColor * convolutionMatrix[0][2];\n"" , STRING> <"+"> <""resultColor += leftColor * convolutionMatrix[1][0] + centerColor.rgb * convolutionMatrix[1][1] + rightColor * convolutionMatrix[1][2];\n"" , STRING> <"+"> <""resultColor += bottomLeftColor * convolutionMatrix[2][0] + bottomColor * convolutionMatrix[2][1] + bottomRightColor * convolutionMatrix[2][2];\n"" , STRING> <"+"> <""\n"" , STRING> <"+"> <""" , STRING> <"+"> <""resultColor = resultColor + 0.5;\n"" , STRING> <"+"> <""\n"" , STRING> <"+"> <""gl_FragColor = vec4(resultColor, centerColor.a);\n"" , STRING> <"+"> <""}\n"" , STRING> <";"> <"}">  <METHOD_END>
<METHOD_START> <"private"> <"GPUImageLaplacianFilter" , void> <"("> <"final"> <"float"> <"[]"> <"convolutionKernel" , float[]> <")"> <"{"> <"super("> <"LAPLACIAN_FRAGMENT_SHADER" , java.lang.String> <");"> <"mConvolutionKernel" , float[]> <"="> <"convolutionKernel" , float[]> <";"> <"}">  <METHOD_END>
<METHOD_START> <"@"> <"Override" , java.lang.Override> <"public"> <"void"> <"onInit" , void> <"("> <")"> <"{"> <"super."> <"onInit"> <"("> <")"> <";"> <"mUniformConvolutionMatrix" , int> <"="> <"GLES20"> <"."> <"glGetUniformLocation"> <"("> <"getProgram"> <"("> <")"> <","> <""convolutionMatrix"" , STRING> <")"> <";"> <"setConvolutionKernel" , void> <"("> <"mConvolutionKernel" , float[]> <")"> <";"> <"}">  <METHOD_END>
<METHOD_START> <"private"> <"void"> <"setConvolutionKernel" , void> <"("> <"final"> <"float"> <"[]"> <"convolutionKernel" , float[]> <")"> <"{"> <"mConvolutionKernel" , float[]> <"="> <"convolutionKernel" , float[]> <";"> <"setUniformMatrix3f"> <"("> <"mUniformConvolutionMatrix" , int> <","> <"mConvolutionKernel" , float[]> <")"> <";"> <"}">  <METHOD_END>
